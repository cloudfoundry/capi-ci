resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource
- name: cron-resource
  type: docker-image
  source:
    repository: cftoolsmiths/cron-test

resources:
  - name: terraform
    type: terraform
    source:
      backend_type: gcs
      backend_config:
        bucket: ((bosh_lite_storage_bucket))
        prefix: bosh-lite/
        credentials: ((bosh_lite_gcp_json_key))
  - name: capi-ci
    type: git
    source:
      branch: main
      uri: https://github.com/cloudfoundry/capi-ci.git
  - name: bosh-deployment
    type: git
    source:
      branch: master
      uri: https://github.com/cloudfoundry/bosh-deployment.git
  - name: ready-pool
    type: pool
    source:
      branch: ari-pipeline
      uri: git@github.com:cloudfoundry/capi-env-pool.git
      pool: bosh-lites
      private_key: ((pcf_bosh_lite_pool_deploy_key))
      git_config: &pool-git-config
        -
          name: "user.name"
          value: ((ari-wg-gitbot-username))
        -
          name: "user.email"
          value: ((ari-wg-gitbot-email))
  - name: broken-pool
    type: pool
    source:
      branch: ari-pipeline
      uri: git@github.com:cloudfoundry/capi-env-pool.git
      pool: broken-bosh-lites
      private_key: ((pcf_bosh_lite_pool_deploy_key))
      git_config: *pool-git-config
  - name: building-pool
    type: pool
    source:
      branch: ari-pipeline
      uri: git@github.com:cloudfoundry/capi-env-pool.git
      pool: building-bosh-lites
      private_key: ((pcf_bosh_lite_pool_deploy_key))
      git_config: *pool-git-config
  - name: pool-repo
    type: git
    source:
      branch: ari-pipeline
      uri: git@github.com:cloudfoundry/capi-env-pool.git
      private_key: ((pcf_bosh_lite_pool_deploy_key))
  - name: create-bosh-lite-trigger
    type: git
    source:
      branch: ari-pipeline
      uri: git@github.com:cloudfoundry/capi-env-pool.git
      private_key: ((pcf_bosh_lite_pool_deploy_key))
      paths:
        - .trigger-bosh-lites-create # updated by check-pool-size
  - name: cf-deployment
    type: git
    source:
      branch: release-candidate
      uri: https://github.com/cloudfoundry/cf-deployment.git
  - name: cf-deploy
    type: bosh-deployment
    source:
      skip_check: true
  - name: one-hour
    type: time
    source:
      interval: 1h

jobs:
  - name: create-bosh-lite
    plan:
      - in_parallel:
          steps:
          - get: capi-ci
          - get: bosh-deployment
          - get: cf-deployment
          - get: create-bosh-lite-trigger
            trigger: true
      - task: generate-fake-env-for-building-pool
        file: capi-ci/ci/bosh-lite/generate-fake-env-for-building-pool.yml
      - put: building-pool
        params:
          add_claimed: fake-placeholder-env/
      - do:
          - task: name-bosh-lite
            file: capi-ci/ci/bosh-lite/name-bosh-lite.yml
          - put: terraform
            params:
              env_name_file: env-name/env-name
              delete_on_failure: true
              terraform_source: capi-ci/terraform/bosh-lite/
              vars: &terraform-vars
                project_id: ((bosh_lite_project_id))
                json_key: ((bosh_lite_gcp_json_key))
                dns_project_id: ((dns_gcp_project_id))
                dns_json_key: ((dns_gcp_json_key))
                system_domain_suffix: ((bosh_lite_system_domain_suffix))
                dns_zone_name: ((bosh_lite_dns_zone_name))
          - task: create-bosh-lite
            file: capi-ci/ci/bosh-lite/create-bosh-lite.yml
            params:
              GCP_JSON_KEY: ((bosh_lite_gcp_json_key))
          - do:
              - task: create-env-vars-file
                file: capi-ci/ci/bosh-lite/create-env-vars-file.yml
              - task: upload-cf-assets
                file: capi-ci/ci/bosh-lite/upload-cf-assets.yml
              - task: write-bosh-target-file
                file: capi-ci/ci/bosh-lite/write-bosh-target-file.yml
              - put: cf-deploy
                params:
                  source_file: bosh-target/target.yml
                  manifest: cf-deployment/cf-deployment.yml
                  vars_files:
                  - bosh-target/vars.yml
                  ops_files:
                  - capi-ci/cf-deployment-operations/skip-cert-verify.yml
                  - capi-ci/cf-deployment-operations/use-latest-stemcell.yml
                  - cf-deployment/operations/bosh-lite.yml
                  - cf-deployment/operations/use-compiled-releases.yml
                  - capi-ci/cf-deployment-operations/seed-credhub-asg.yml
              - task: upload-to-gcs
                file: capi-ci/ci/gcs/upload-to-gcs.yml
                input_mapping:
                  environment: terraform
                  source-directory: director-state
                params:
                  GCP_JSON_KEY: ((bosh_lite_gcp_json_key))
                  GCP_BUCKET: ((bosh_lite_storage_bucket))
                  GCP_PATH: director-state
                  USE_ENV_NAMED_SUBDIR: true
              - put: ready-pool
                params:
                  add: bosh-lite-env-info/
              - put: building-pool
                params:
                  remove: fake-placeholder-env/
            on_failure:
              in_parallel:
                steps:
                - put: building-pool
                  params:
                    remove: fake-placeholder-env/
                - task: delete-bosh-lite
                  file: capi-ci/ci/bosh-lite/delete-bosh-lite.yml
        on_failure:
          in_parallel:
            steps:
            - put: terraform
              params:
                action: destroy
                env_name_file: terraform/name
                terraform_source: capi-ci/terraform/bosh-lite/
                vars: *terraform-vars
              get_params:
                action: destroy
            - put: building-pool
              params:
                remove: fake-placeholder-env/

  - name: delete-bosh-lite
    plan:
      - in_parallel:
          steps:
          - get: capi-ci
          - get: bosh-deployment
          - get: broken-pool
            passed: [ check-broken-pool-size ]
            trigger: true
      - do:
        - task: download-from-gcs
          file: capi-ci/ci/gcs/download-from-gcs.yml
          input_mapping:
            environment: broken-pool
          output_mapping:
            destination-directory: director-state
          params:
            GCP_JSON_KEY: ((bosh_lite_gcp_json_key))
            GCP_BUCKET: ((bosh_lite_storage_bucket))
            GCP_PATH: director-state
            USE_ENV_NAMED_SUBDIR: true
        - task: delete-bosh-lite
          file: capi-ci/ci/bosh-lite/delete-bosh-lite.yml
        - put: terraform
          params:
            action: destroy
            env_name_file: broken-pool/name
            terraform_source: capi-ci/terraform/bosh-lite/
            vars: *terraform-vars
          get_params:
            action: destroy
        - task: delete-from-gcs
          file: capi-ci/ci/gcs/delete-from-gcs.yml
          input_mapping:
            environment: broken-pool
          params:
            GCP_JSON_KEY: ((bosh_lite_gcp_json_key))
            GCP_BUCKET: ((bosh_lite_storage_bucket))
            GCP_PATH: director-state
            USE_ENV_NAMED_SUBDIR: true
        - put: broken-pool
          params:
            remove: broken-pool/
        on_failure:
          put: broken-pool
          params:
            release: broken-pool/

  - name: check-pool-size
    build_logs_to_retain: 100
    plan:
      - in_parallel:
          steps:
          - get: capi-ci
          - get: pool-repo
          - get: one-hour
            trigger: true
      - task: check-pool-size
        file: capi-ci/ci/bosh-lite/check-pool-size.yml
        input_mapping:
          env-pool: pool-repo
        params:
          MIN_UNCLAIMED_COUNT: 4
          GIT_USERNAME: ((ari-wg-gitbot-username))
          GIT_EMAIL: ((ari-wg-gitbot-email))
      - put: pool-repo
        params:
          repository: updated-env-pool
          rebase: true

  - name: check-broken-pool-size
    build_logs_to_retain: 100
    plan:
      - in_parallel:
          steps:
          - get: capi-ci
          - get: pool-repo
          - get: one-hour
            trigger: true
      - try:
          task: check-broken-pool-size
          file: capi-ci/ci/bosh-lite/check-broken-pool-size.yml
          input_mapping:
            env-pool: pool-repo
          on_success:
            put: broken-pool
            params: { acquire: true }
